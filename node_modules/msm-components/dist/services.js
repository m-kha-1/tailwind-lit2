import e from"i18next";import t from"i18next-browser-languagedetector";import n from"i18next-http-backend";import{URLPattern as r}from"urlpattern-polyfill";import{makeAutoObservable as o,runInAction as i,toJS as a}from"mobx";function s(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}function c(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function g(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){c(i,r,o,a,s,"next",e)}function s(e){c(i,r,o,a,s,"throw",e)}a(void 0)}))}}function h(e,t,n){return(t=u(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.add(e)}window.app=window.app||new MSM2.App;var d=window.app,v=MSM2.App.HtmlHelper,m=MSM2.App.AuthHelper,f=MSM2.App.ScriptHelper;class O{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;h(this,"queue",new Map),h(this,"pending",new Set),h(this,"parallel",1),this.parallel=e}push(e){return new Promise(((t,n)=>{this.queue.set(e,t),this.startNext()}))}remove(e){this.pending.delete(e),this.startNext()}startNext(){var e=this;if(this.pending.size<this.parallel){var t=this.parallel-this.pending.size,n=[...this.queue].slice(0,t),r=function(t){e.queue.delete(o);var n=o().then((e=>t(e)));e.pending.add(n),n.then((()=>e.remove(n)),(t=>{console.log("PromiseQueue rejected; reason: ".concat(JSON.stringify(t))),e.remove(n)}))};for(var[o,i]of n)r(i)}}}var w=new class{constructor(){h(this,"_queue",new O(50))}isLogged(){return this.invokeAndGetJson("sellerRegistrationServiceImpl","PROTOTYPE","isLogged",[]).then((e=>e.result))}getLoggedProfile(){return this.invokeAndGetJson("sellerRegistrationServiceImpl","PROTOTYPE","getLoggedProfile",[]).then((e=>e.result))}getLoggedSeller(){return this.invokeAndGetJson("sellerRegistrationServiceImpl","PROTOTYPE","getLoggedSeller",[]).then((e=>e.result))}getCdnFolder(){return this.invokeAndGetJson("ecomSearchEngineServiceImpl","PROTOTYPE","getCdnFolderName",[]).then((e=>e.result))}getSecuredFolder(){return this.invokeAndGetJson("commonProperties","PROTOTYPE","getSecuredCdnFolderName",[]).then((e=>e.result))}getSeoUrl(e,t){if(e&&t)return this.invokeAndGetJson("marketingServiceImpl","PROTOTYPE","getSeoUrl",[e,t]).then((e=>e.result))}getSuperUserLogin(){return this.invokeAndGetJson("commonProperties","PROTOTYPE","getSuperUserLogin",[]).then((e=>e.result))}getAttributeAreaTypes(){return this.invokeAndGetJson("ecomSearchEngineServiceImpl","PROTOTYPE","getAreaUsageTypes",[]).then((e=>e.result))}getAttributeTypes(){return this.invokeAndGetJson("ecomSearchEngineServiceImpl","PROTOTYPE","getAttributeTypes",[]).then((e=>e.result))}getFormattedDate(e,t){if(e&&t)return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getFormattedDate",[e,t]).then((e=>{var t;return null===(t=e.result)||void 0===t?void 0:t.value}))}getFileExtension(e){if(e)return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getFileExtension",[e]).then((e=>e.result))}getLangCode(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getLangCode",[]).then((e=>e.result))}getLanguageDetection(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","isLanguageDetection",[]).then((e=>e.result))}getActiveLanguages(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getActiveLanguages",[]).then((e=>e.result))}getWebSiteSettings(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getCurrentWebSiteSettings",[]).then((e=>e.result))}isOpenAiActive(){return N("chatGPTService","PROTOTYPE","isOpenAiKeyDefined").then((e=>e.result))}getPayloadOfForm(e){return v.getPayloadOfForm(e)}getResultObjectOfElements(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return v.getResultObjectOfElements(t)}getResultObjectOfSelectElements(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return v.getResultObjectOfSelectElements(t)}stringFormat(e,t){for(var n=0;n<t.length;n++){var r=new RegExp("\\{"+n+"\\}","gi");e=e.replace(r,arguments[n])}return e}arrayRange(e,t,n){return Array.from({length:(t-e)/n+1},((t,r)=>e+r*n))}escapeRegExp(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").replace(/[.*+?^${}()|[\]\\]/g,"\\\\$&")}setPlatformInfo(){var e=navigator.userAgent.toLowerCase();-1!=e.indexOf("safari")&&(e.indexOf("chrome")>-1?document.body.classList.add("chrome"):document.body.classList.add("safari"))}getCookie(e){for(var t=e+"=",n=decodeURIComponent(document.cookie).split(";"),r=0;r<n.length;r++){for(var o=n[r];" "==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(t))return o.substring(t.length,o.length)}return""}setCookie(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,i=["".concat(e,"=").concat(t),null!=n?"expires=".concat(n):"",null!=r?"domain=".concat(r):"",null!=o?"path=".concat(o):""].filter((e=>e.length>0)).join("; ");document.cookie=i}getDomainName(){return window.location.hostname}deleteAllCookies(e){var t=t=>e.some((e=>e instanceof RegExp?e.test(t):t==e)),n=document.cookie.split("; ");for(var r of n){var o=r.split(";")[0].split("=")[0];if(!t(o))for(var i=window.location.hostname.split(".");i.length>0;){var a="Thu, 01-Jan-1970 00:00:01 GMT",s=i.join(".");this.setCookie(o,"",a,s,"/"),this.setCookie(o,"",a,"."+s,"/"),i.shift()}}window.localStorage.clear()}languageAwareUrl(e){var t=this;return g((function*(){if(!(yield t.getLanguageDetection())&&t.isNotSPA(e)){var n=k("i18next")?k("i18next"):sessionStorage.getItem("msmLang");return"/".concat(n).concat(e)}return e}))()}isNotSPA(e){return!e.match(/^(\/user\/.*|\/admin\/.*)/)}groupIntervals(e,t){for(var n=[],r=e.sort(((e,t)=>e-t)),o=r.length>0?r[0]:0,i=r.length>0?r[r.length-1]:0,a=o;a<i;a+=t){var s=a+t>=i?i:a+t,l=[a+1,s];if(a===o){var u=[0,a];n.push(u)}if(n.push(l),s===i){var c=[s];n.push(c)}}return n}applyToUrl(e){var t=e&&""!==e.toString()?"?".concat(e.toString()):"",n="".concat(window.location.protocol,"//").concat(window.location.host).concat(window.location.pathname).concat(t);window.history.replaceState({path:n},document.title,decodeURI(n))}invokeAndGetJson(e,t,n,r,o,i){return new Promise(((a,s)=>{setTimeout((()=>{d.invokeAndGetJson$(e,t,n,r,null,o,i).subscribe((function(e){a(e)}))}),0)}))}invokeFromRepositoryAndGetJson(e,t,n,r){return new Promise(((o,i)=>{setTimeout((()=>{d.invokeFromRepositoryAndGetJson$(e,t,null,n,r).subscribe((function(e){o(e)}))}),0)}))}updateBeanAndGetJson(e,t,n,r,o){return new Promise(((i,a)=>{setTimeout((()=>{d.updateBeanAndGetJson$(e,t,n,null,r,o).subscribe((function(e){i(e)}))}),0)}))}},y=e=>w.languageAwareUrl(e),P=e=>w.deleteAllCookies(e),S=()=>w.getDomainName(),b=(e,t,n,r,o)=>w.setCookie(e,t,n,r,o),k=e=>w.getCookie(e),A=()=>w.setPlatformInfo(),T=e=>w.escapeRegExp(e),R=()=>w.getCdnFolder(),L=()=>w.getSecuredFolder(),E=(e,t)=>w.getSeoUrl(e,t),x=()=>w.getSuperUserLogin(),I=()=>w.getAttributeAreaTypes(),j=()=>w.getAttributeTypes(),J=(e,t)=>w.getFormattedDate(e,t),C=()=>w.getLangCode(),F=()=>w.getLanguageDetection(),G=()=>w.getActiveLanguages(),_=()=>w.isLogged(),Y=()=>w.getLoggedProfile(),N=(e,t,n,r,o,i)=>w.invokeAndGetJson(e,t,n,r,o,i),M=(e,t,n,r)=>w.invokeFromRepositoryAndGetJson(e,t,n,r),U=(e,t,n,r,o)=>w.updateBeanAndGetJson(e,t,n,r,o),B=e=>w.getPayloadOfForm(e),D=()=>w.getWebSiteSettings(),q=()=>w.isOpenAiActive();var $=new class{constructor(){h(this,"_defaultLocalesPath",""),h(this,"_translations",new Map),h(this,"_i18n",null),h(this,"proxy",new Proxy({},{})),h(this,"placeholder","..."),this.proxy=new Proxy({},{has:(e,t)=>this._translations.get("translationsRepository").has(t),get:(e,t)=>this.get(t)}),this._translations.set("translationsRepository",new Map),this._i18n=C().then((r=>e.use(t).use(n).init({fallbackLng:r,partialBundledLanguages:!0,backend:{loadPath:"".concat(this._defaultLocalesPath)},detection:{order:["cookie","sessionStorage"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupSessionStorage:"msmLang",lookupFromPathIndex:0,lookupFromSubdomainIndex:0,caches:["sessionStorage","cookie"]}},((e,t)=>{if(e)return console.log("something went wrong loading",e)}))))}setLocalesPath(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"".concat(this._defaultLocalesPath);this._i18n=C().then((o=>e.use(t).use(n).init({fallbackLng:o,backend:{loadPath:"".concat(r)},detection:{order:["cookie","sessionStorage"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupSessionStorage:"msmLang",lookupFromPathIndex:0,lookupFromSubdomainIndex:0,caches:["sessionStorage","cookie"]}},((e,t)=>{if(e)return console.log("something went wrong loading",e)}))))}addResourceBundle(t,n,r){e.addResourceBundle(t,n,r)}load(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"translationsRepository",n=N("translationServiceImpl","PROTOTYPE","getTranslation",[e,t]).then((t=>{var n;return null!==(n=t.result)&&void 0!==n&&n.value?t.result.value:(console.warn('Translation not found for "'.concat(e,'"')),e)}));return this._translations.has(t)||this._translations.set(t,new Map),this._translations.get(t).set(e,n),n}clearCache(){this._translations=new Map}get(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"translationsRepository";return this._translations.has(t)&&this._translations.get(t).has(e)?this._translations.get(t).get(e):this.load(e,t)}many(){var e=arguments,t=this;return g((function*(){for(var n=e.length,r=new Array(n),o=0;o<n;o++)r[o]=e[o];var i=yield Promise.all(r.map(function(){var e=g((function*(e){return[e,yield t.get(e)]}));return function(t){return e.apply(this,arguments)}}()));return Object.fromEntries(i)}))()}loadByLangCodeForEntity(e,t){return N("translationServiceImpl","PROTOTYPE","getTranslation",[e,t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:"translationsRepository"]).then((t=>{var n;return null!==(n=t.result)&&void 0!==n&&n.value?t.result.value:(console.warn('Translation not found for "'.concat(e,'"')),e)}))}loadByLangCode(e,t){var n={query:{_id:"".concat(e,"_").concat(t)}};return M("translationsRepository",n).then((e=>e.result.map((e=>{var{text:t}=e;return{text:t}})).map((e=>e.text))[0]))}loadTranslationById(e){return M("translationsRepository",{query:{_id:e}}).then((e=>e.result[0]))}getLanguages(){return N("translationServiceImpl","PROTOTYPE","findLanguages",[]).then((e=>e.result))}getAlphabetForActiveLanguage(){return N("translationServiceImpl","PROTOTYPE","getAlphabetForActiveLanguage",["true"])}translate(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return this._i18n.then((()=>new Promise(((t,r)=>{t(e.t(...n))}))))}},H=$.proxy,W=function(){return $.translate(...arguments)},z=function(){return $.setLocalesPath(...arguments)},Q=function(){return $.load(...arguments)},K=function(){return $.clearCache(...arguments)},V=function(){return $.get(...arguments)},X=function(){return $.many(...arguments)},Z=function(){return $.loadByLangCodeForEntity(...arguments)},ee=function(){return $.loadByLangCode(...arguments)},te=function(){return $.loadTranslationById(...arguments)},ne=function(){return $.getLanguages(...arguments)},re=function(){return $.getAlphabetForActiveLanguage(...arguments)},oe=new WeakSet;function ie(e,t){var n=s(oe,this,ae).call(this,e,t);return i((()=>this.activeRoute=n)),n}function ae(e,t){var n=a(this.routes.get(e));if(s(oe,this,se).call(this,n)){var r=n.url.substring(n.url.lastIndexOf("/")+2),o=r.replace("+","").replace(".html","");n.props={},n.url=n.url.replace(":"+r,t),n.props[o]=t.replace(".html","")}return sessionStorage.setItem("activeRoute",JSON.stringify(n)),W(n.title).then((e=>document.title=this.applicationName+" | "+e.toString())),n}function se(e){return-1!==(null==e?void 0:e.url.indexOf(":"))}var le=new class{constructor(){p(this,oe),h(this,"applicationName",null),h(this,"activeRoute",null),h(this,"routes",new Map),h(this,"disabled",!1),o(this)}init(e){var t=this.findRouteByUrl(window.location.pathname);if(this.applicationName=e,t)if(s(oe,this,se).call(this,t)){var n=this.getActiveRoute(),[r]=Object.keys(n.props),o=n.props[r];this.navigate(n.panel,o+".html")}else s(oe,this,se).call(this,t)||this.navigate(t.panel);else{var[i]=this.routes.keys(),a=this.routes.get(i);if(s(oe,this,se).call(this,a)){var[l]=Object.keys(a.props),u=a.props[l];this.navigate(a.panel,u+".html")}else s(oe,this,se).call(this,a)||this.navigate(a.panel)}window.addEventListener("popstate",(e=>{var t=e.state;if(t.props){var[n]=Object.keys(t.props),r=t.props[n];s(oe,this,ie).call(this,e.state.panel,r)}else s(oe,this,ie).call(this,e.state.panel)}))}findRouteByUrl(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},[...this.routes.values()].find((t=>t.pattern.test(window.origin+e))));if(Object.keys(t).length>0){var n=t.pattern.exec(window.location.href);return t.props=n.pathname.groups,i((()=>this.activeRoute=t)),t}}addRoute(e,t,n){var o=new r({pathname:e,baseURL:window.location.origin});this.routes.set(t,{url:e,panel:t,title:n,pattern:o})}removeActiveRoute(){sessionStorage.removeItem("activeRoute")}navigate(e,t){if(this.routes.has(e)){var n=s(oe,this,ie).call(this,e,t);window.history.pushState(n,"",n.url)}}disable(){this.disabled=!0}getActiveRoute(){if(this.activeRoute)return a(this.activeRoute);var e=sessionStorage.getItem("activeRoute");return e?JSON.parse(e):null}};export{d as MSM2App,m as MSM2AuthHelper,v as MSM2HtmlHelper,f as MSM2ScriptHelper,M as callRepository,N as callService,K as clearTranslationsCache,P as deleteAllCookies,T as escapeRegExp,G as getActiveLanguages,re as getAlphabetForActiveLanguage,I as getAttributeAreaTypes,j as getAttributeTypes,R as getCdnFolder,k as getCookie,S as getDomainName,J as getFormattedDate,C as getLangCode,F as getLanguageDetection,ne as getLanguages,Y as getLoggedProfile,B as getPayloadOfForm,L as getSecuredFolder,E as getSeoUrl,x as getSuperUserLogin,D as getWebSiteSettings,_ as isLogged,q as isOpenAiActive,y as languageAwareUrl,ee as loadByLangCode,Z as loadByLangCodeForEntity,X as loadManyTranslations,Q as loadTranslation,te as loadTranslationById,le as routeManager,b as setCookie,z as setLocalesPath,A as setPlatformInfo,V as tr,W as translate,H as translations,U as updateBean};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
