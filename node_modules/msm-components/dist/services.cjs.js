"use strict";var e=require("i18next"),t=require("i18next-browser-languagedetector"),n=require("i18next-http-backend"),r=require("urlpattern-polyfill"),o=require("mobx");function i(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}function l(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){l(i,r,o,a,s,"next",e)}function s(e){l(i,r,o,a,s,"throw",e)}a(void 0)}))}}function c(e,t,n){return(t=s(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.add(e)}window.app=window.app||new MSM2.App;var p=window.app,h=MSM2.App.HtmlHelper,d=MSM2.App.AuthHelper,v=MSM2.App.ScriptHelper;class f{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;c(this,"queue",new Map),c(this,"pending",new Set),c(this,"parallel",1),this.parallel=e}push(e){return new Promise(((t,n)=>{this.queue.set(e,t),this.startNext()}))}remove(e){this.pending.delete(e),this.startNext()}startNext(){var e=this;if(this.pending.size<this.parallel){var t=this.parallel-this.pending.size,n=[...this.queue].slice(0,t),r=function(t){e.queue.delete(o);var n=o().then((e=>t(e)));e.pending.add(n),n.then((()=>e.remove(n)),(t=>{console.log("PromiseQueue rejected; reason: ".concat(JSON.stringify(t))),e.remove(n)}))};for(var[o,i]of n)r(i)}}}var m=new class{constructor(){c(this,"_queue",new f(50))}isLogged(){return this.invokeAndGetJson("sellerRegistrationServiceImpl","PROTOTYPE","isLogged",[]).then((e=>e.result))}getLoggedProfile(){return this.invokeAndGetJson("sellerRegistrationServiceImpl","PROTOTYPE","getLoggedProfile",[]).then((e=>e.result))}getLoggedSeller(){return this.invokeAndGetJson("sellerRegistrationServiceImpl","PROTOTYPE","getLoggedSeller",[]).then((e=>e.result))}getCdnFolder(){return this.invokeAndGetJson("ecomSearchEngineServiceImpl","PROTOTYPE","getCdnFolderName",[]).then((e=>e.result))}getSecuredFolder(){return this.invokeAndGetJson("commonProperties","PROTOTYPE","getSecuredCdnFolderName",[]).then((e=>e.result))}getSeoUrl(e,t){if(e&&t)return this.invokeAndGetJson("marketingServiceImpl","PROTOTYPE","getSeoUrl",[e,t]).then((e=>e.result))}getSuperUserLogin(){return this.invokeAndGetJson("commonProperties","PROTOTYPE","getSuperUserLogin",[]).then((e=>e.result))}getAttributeAreaTypes(){return this.invokeAndGetJson("ecomSearchEngineServiceImpl","PROTOTYPE","getAreaUsageTypes",[]).then((e=>e.result))}getAttributeTypes(){return this.invokeAndGetJson("ecomSearchEngineServiceImpl","PROTOTYPE","getAttributeTypes",[]).then((e=>e.result))}getFormattedDate(e,t){if(e&&t)return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getFormattedDate",[e,t]).then((e=>{var t;return null===(t=e.result)||void 0===t?void 0:t.value}))}getFileExtension(e){if(e)return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getFileExtension",[e]).then((e=>e.result))}getLangCode(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getLangCode",[]).then((e=>e.result))}getLanguageDetection(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","isLanguageDetection",[]).then((e=>e.result))}getActiveLanguages(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getActiveLanguages",[]).then((e=>e.result))}getWebSiteSettings(){return this.invokeAndGetJson("frameworkOperationServiceImpl","PROTOTYPE","getCurrentWebSiteSettings",[]).then((e=>e.result))}isOpenAiActive(){return w("chatGPTService","PROTOTYPE","isOpenAiKeyDefined").then((e=>e.result))}getPayloadOfForm(e){return h.getPayloadOfForm(e)}getResultObjectOfElements(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return h.getResultObjectOfElements(t)}getResultObjectOfSelectElements(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return h.getResultObjectOfSelectElements(t)}stringFormat(e,t){for(var n=0;n<t.length;n++){var r=new RegExp("\\{"+n+"\\}","gi");e=e.replace(r,arguments[n])}return e}arrayRange(e,t,n){return Array.from({length:(t-e)/n+1},((t,r)=>e+r*n))}escapeRegExp(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").replace(/[.*+?^${}()|[\]\\]/g,"\\\\$&")}setPlatformInfo(){var e=navigator.userAgent.toLowerCase();-1!=e.indexOf("safari")&&(e.indexOf("chrome")>-1?document.body.classList.add("chrome"):document.body.classList.add("safari"))}getCookie(e){for(var t=e+"=",n=decodeURIComponent(document.cookie).split(";"),r=0;r<n.length;r++){for(var o=n[r];" "==o.charAt(0);)o=o.substring(1);if(0==o.indexOf(t))return o.substring(t.length,o.length)}return""}setCookie(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,i=["".concat(e,"=").concat(t),null!=n?"expires=".concat(n):"",null!=r?"domain=".concat(r):"",null!=o?"path=".concat(o):""].filter((e=>e.length>0)).join("; ");document.cookie=i}getDomainName(){return window.location.hostname}deleteAllCookies(e){var t=t=>e.some((e=>e instanceof RegExp?e.test(t):t==e)),n=document.cookie.split("; ");for(var r of n){var o=r.split(";")[0].split("=")[0];if(!t(o))for(var i=window.location.hostname.split(".");i.length>0;){var a="Thu, 01-Jan-1970 00:00:01 GMT",s=i.join(".");this.setCookie(o,"",a,s,"/"),this.setCookie(o,"",a,"."+s,"/"),i.shift()}}window.localStorage.clear()}languageAwareUrl(e){var t=this;return u((function*(){if(!(yield t.getLanguageDetection())&&t.isNotSPA(e)){var n=y("i18next")?y("i18next"):sessionStorage.getItem("msmLang");return"/".concat(n).concat(e)}return e}))()}isNotSPA(e){return!e.match(/^(\/user\/.*|\/admin\/.*)/)}groupIntervals(e,t){for(var n=[],r=e.sort(((e,t)=>e-t)),o=r.length>0?r[0]:0,i=r.length>0?r[r.length-1]:0,a=o;a<i;a+=t){var s=a+t>=i?i:a+t,l=[a+1,s];if(a===o){var u=[0,a];n.push(u)}if(n.push(l),s===i){var c=[s];n.push(c)}}return n}applyToUrl(e){var t=e&&""!==e.toString()?"?".concat(e.toString()):"",n="".concat(window.location.protocol,"//").concat(window.location.host).concat(window.location.pathname).concat(t);window.history.replaceState({path:n},document.title,decodeURI(n))}invokeAndGetJson(e,t,n,r,o,i){return new Promise(((a,s)=>{setTimeout((()=>{p.invokeAndGetJson$(e,t,n,r,null,o,i).subscribe((function(e){a(e)}))}),0)}))}invokeFromRepositoryAndGetJson(e,t,n,r){return new Promise(((o,i)=>{setTimeout((()=>{p.invokeFromRepositoryAndGetJson$(e,t,null,n,r).subscribe((function(e){o(e)}))}),0)}))}updateBeanAndGetJson(e,t,n,r,o){return new Promise(((i,a)=>{setTimeout((()=>{p.updateBeanAndGetJson$(e,t,n,null,r,o).subscribe((function(e){i(e)}))}),0)}))}},y=e=>m.getCookie(e),O=()=>m.getLangCode(),w=(e,t,n,r,o,i)=>m.invokeAndGetJson(e,t,n,r,o,i),P=(e,t,n,r)=>m.invokeFromRepositoryAndGetJson(e,t,n,r);var S=new class{constructor(){c(this,"_defaultLocalesPath",""),c(this,"_translations",new Map),c(this,"_i18n",null),c(this,"proxy",new Proxy({},{})),c(this,"placeholder","..."),this.proxy=new Proxy({},{has:(e,t)=>this._translations.get("translationsRepository").has(t),get:(e,t)=>this.get(t)}),this._translations.set("translationsRepository",new Map),this._i18n=O().then((r=>e.use(t).use(n).init({fallbackLng:r,partialBundledLanguages:!0,backend:{loadPath:"".concat(this._defaultLocalesPath)},detection:{order:["cookie","sessionStorage"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupSessionStorage:"msmLang",lookupFromPathIndex:0,lookupFromSubdomainIndex:0,caches:["sessionStorage","cookie"]}},((e,t)=>{if(e)return console.log("something went wrong loading",e)}))))}setLocalesPath(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"".concat(this._defaultLocalesPath);this._i18n=O().then((o=>e.use(t).use(n).init({fallbackLng:o,backend:{loadPath:"".concat(r)},detection:{order:["cookie","sessionStorage"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupSessionStorage:"msmLang",lookupFromPathIndex:0,lookupFromSubdomainIndex:0,caches:["sessionStorage","cookie"]}},((e,t)=>{if(e)return console.log("something went wrong loading",e)}))))}addResourceBundle(t,n,r){e.addResourceBundle(t,n,r)}load(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"translationsRepository",n=w("translationServiceImpl","PROTOTYPE","getTranslation",[e,t]).then((t=>{var n;return null!==(n=t.result)&&void 0!==n&&n.value?t.result.value:(console.warn('Translation not found for "'.concat(e,'"')),e)}));return this._translations.has(t)||this._translations.set(t,new Map),this._translations.get(t).set(e,n),n}clearCache(){this._translations=new Map}get(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"translationsRepository";return this._translations.has(t)&&this._translations.get(t).has(e)?this._translations.get(t).get(e):this.load(e,t)}many(){var e=arguments,t=this;return u((function*(){for(var n=e.length,r=new Array(n),o=0;o<n;o++)r[o]=e[o];var i=yield Promise.all(r.map(function(){var e=u((function*(e){return[e,yield t.get(e)]}));return function(t){return e.apply(this,arguments)}}()));return Object.fromEntries(i)}))()}loadByLangCodeForEntity(e,t){return w("translationServiceImpl","PROTOTYPE","getTranslation",[e,t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:"translationsRepository"]).then((t=>{var n;return null!==(n=t.result)&&void 0!==n&&n.value?t.result.value:(console.warn('Translation not found for "'.concat(e,'"')),e)}))}loadByLangCode(e,t){var n={query:{_id:"".concat(e,"_").concat(t)}};return P("translationsRepository",n).then((e=>e.result.map((e=>{var{text:t}=e;return{text:t}})).map((e=>e.text))[0]))}loadTranslationById(e){return P("translationsRepository",{query:{_id:e}}).then((e=>e.result[0]))}getLanguages(){return w("translationServiceImpl","PROTOTYPE","findLanguages",[]).then((e=>e.result))}getAlphabetForActiveLanguage(){return w("translationServiceImpl","PROTOTYPE","getAlphabetForActiveLanguage",["true"])}translate(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return this._i18n.then((()=>new Promise(((t,r)=>{t(e.t(...n))}))))}},A=S.proxy,x=function(){return S.translate(...arguments)},b=new WeakSet;function k(e,t){var n=i(b,this,T).call(this,e,t);return o.runInAction((()=>this.activeRoute=n)),n}function T(e,t){var n=o.toJS(this.routes.get(e));if(i(b,this,R).call(this,n)){var r=n.url.substring(n.url.lastIndexOf("/")+2),a=r.replace("+","").replace(".html","");n.props={},n.url=n.url.replace(":"+r,t),n.props[a]=t.replace(".html","")}return sessionStorage.setItem("activeRoute",JSON.stringify(n)),x(n.title).then((e=>document.title=this.applicationName+" | "+e.toString())),n}function R(e){return-1!==(null==e?void 0:e.url.indexOf(":"))}var L=new class{constructor(){g(this,b),c(this,"applicationName",null),c(this,"activeRoute",null),c(this,"routes",new Map),c(this,"disabled",!1),o.makeAutoObservable(this)}init(e){var t=this.findRouteByUrl(window.location.pathname);if(this.applicationName=e,t)if(i(b,this,R).call(this,t)){var n=this.getActiveRoute(),[r]=Object.keys(n.props),o=n.props[r];this.navigate(n.panel,o+".html")}else i(b,this,R).call(this,t)||this.navigate(t.panel);else{var[a]=this.routes.keys(),s=this.routes.get(a);if(i(b,this,R).call(this,s)){var[l]=Object.keys(s.props),u=s.props[l];this.navigate(s.panel,u+".html")}else i(b,this,R).call(this,s)||this.navigate(s.panel)}window.addEventListener("popstate",(e=>{var t=e.state;if(t.props){var[n]=Object.keys(t.props),r=t.props[n];i(b,this,k).call(this,e.state.panel,r)}else i(b,this,k).call(this,e.state.panel)}))}findRouteByUrl(e){var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},[...this.routes.values()].find((t=>t.pattern.test(window.origin+e))));if(Object.keys(t).length>0){var n=t.pattern.exec(window.location.href);return t.props=n.pathname.groups,o.runInAction((()=>this.activeRoute=t)),t}}addRoute(e,t,n){var o=new r.URLPattern({pathname:e,baseURL:window.location.origin});this.routes.set(t,{url:e,panel:t,title:n,pattern:o})}removeActiveRoute(){sessionStorage.removeItem("activeRoute")}navigate(e,t){if(this.routes.has(e)){var n=i(b,this,k).call(this,e,t);window.history.pushState(n,"",n.url)}}disable(){this.disabled=!0}getActiveRoute(){if(this.activeRoute)return o.toJS(this.activeRoute);var e=sessionStorage.getItem("activeRoute");return e?JSON.parse(e):null}};exports.MSM2App=p,exports.MSM2AuthHelper=d,exports.MSM2HtmlHelper=h,exports.MSM2ScriptHelper=v,exports.callRepository=P,exports.callService=w,exports.clearTranslationsCache=function(){return S.clearCache(...arguments)},exports.deleteAllCookies=e=>m.deleteAllCookies(e),exports.escapeRegExp=e=>m.escapeRegExp(e),exports.getActiveLanguages=()=>m.getActiveLanguages(),exports.getAlphabetForActiveLanguage=function(){return S.getAlphabetForActiveLanguage(...arguments)},exports.getAttributeAreaTypes=()=>m.getAttributeAreaTypes(),exports.getAttributeTypes=()=>m.getAttributeTypes(),exports.getCdnFolder=()=>m.getCdnFolder(),exports.getCookie=y,exports.getDomainName=()=>m.getDomainName(),exports.getFormattedDate=(e,t)=>m.getFormattedDate(e,t),exports.getLangCode=O,exports.getLanguageDetection=()=>m.getLanguageDetection(),exports.getLanguages=function(){return S.getLanguages(...arguments)},exports.getLoggedProfile=()=>m.getLoggedProfile(),exports.getPayloadOfForm=e=>m.getPayloadOfForm(e),exports.getSecuredFolder=()=>m.getSecuredFolder(),exports.getSeoUrl=(e,t)=>m.getSeoUrl(e,t),exports.getSuperUserLogin=()=>m.getSuperUserLogin(),exports.getWebSiteSettings=()=>m.getWebSiteSettings(),exports.isLogged=()=>m.isLogged(),exports.isOpenAiActive=()=>m.isOpenAiActive(),exports.languageAwareUrl=e=>m.languageAwareUrl(e),exports.loadByLangCode=function(){return S.loadByLangCode(...arguments)},exports.loadByLangCodeForEntity=function(){return S.loadByLangCodeForEntity(...arguments)},exports.loadManyTranslations=function(){return S.many(...arguments)},exports.loadTranslation=function(){return S.load(...arguments)},exports.loadTranslationById=function(){return S.loadTranslationById(...arguments)},exports.routeManager=L,exports.setCookie=(e,t,n,r,o)=>m.setCookie(e,t,n,r,o),exports.setLocalesPath=function(){return S.setLocalesPath(...arguments)},exports.setPlatformInfo=()=>m.setPlatformInfo(),exports.tr=function(){return S.get(...arguments)},exports.translate=x,exports.translations=A,exports.updateBean=(e,t,n,r,o)=>m.updateBeanAndGetJson(e,t,n,r,o);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
